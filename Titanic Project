import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline
train = pd.read_csv('/Users/mac/Documents/Courses/Python for Data Science/Refactored_Py_DS_ML_Bootcamp-master/13-Logistic-Regression/titanic_train.csv')
train.head()
train.isnull()
sns.heatmap(train.isnull(), yticklabels = False, cbar = False, cmap = 'viridis')
sns.set_style('darkgrid')
sns.countplot(x = 'Survived', data = train)
sns.countplot(x = 'Survived', data = train, hue = 'Sex', palette = 'RdBu_r')
sns.countplot(x = 'Survived', data = train, hue = 'Pclass')
sns.displot(train['Age'])
sns.displot(train['Age'].dropna(), kde = False, bins = 30)
sns.displot(train['Age'].dropna(), kde = True, bins = 30)
train['Age'].plot.hist(bins = 35)
train.info()
sns.countplot(x = 'SibSp', data = train)
train['Fare'].hist(bins = 40, figsize = (10,4))
import cufflinks as cf
cf.go_offline()
train['Fare'].iplot(kind = 'hist', bins = 30)
sns.heatmap(train.isnull(), yticklabels = False, cbar = False, cmap = 'viridis')
plt.figure(figsize = (10,7))
sns.boxplot(x = 'Pclass', y = 'Age', data = train)

def impute_age(cols):
    Age = cols[0]
    Pclass = cols[1]
    
    if pd.isnull(Age):
        
        if Pclass == 1:
            return 37 
        elif Pclass == 2:
            return 29
        else: 
            return 24
        
    else:
        return Age


train['Age'] = train[['Age', 'Pclass']].apply(impute_age,axis = 1 )
sns.heatmap(train.isnull(), yticklabels = False, cbar = False, cmap = 'viridis')
train.drop('Cabin', axis = 1, inplace = True)
train.head()
sns.heatmap(train.isnull(), yticklabels = False, cbar = False, cmap = 'viridis')
train[train['Embarked'].isnull() == True]
train.dropna(inplace = True)
sns.heatmap(train.isnull(), yticklabels = False, cbar = False, cmap = 'viridis')
sex = pd.get_dummies(train['Sex'],drop_first = True )
embark = pd.get_dummies(train['Embarked'],drop_first = True )
embark.head()
train = pd.concat([train, sex, embark], axis = 1)
train.head()
train.drop(['Sex', 'Embarked', 'Name', 'Ticket'], axis = 1, inplace = True)
train.head()
train.drop('PassengerId', axis = 1, inplace = True)
train.head()
X = train.drop('Survived', axis = 1)
y = train['Survived']
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)
from sklearn.linear_model import LogisticRegression
logmodel = LogisticRegression(solver = 'liblinear')
logmodel.fit(X_train, y_train)
predictions = logmodel.predict(X_test)
from sklearn.metrics import classification_report
print(classification_report(y_test, predictions))
from sklearn.metrics import confusion_matrix
confusion_matrix(y_test, predictions)


test = pd.read_csv('/Users/mac/Documents/Courses/Python for Data Science/Refactored_Py_DS_ML_Bootcamp-master/13-Logistic-Regression/titanic_test.csv')
test.head()
sns.heatmap(test.isnull(), yticklabels = False, cbar = False, cmap = 'viridis')
plt.figure(figsize = (10,7))
sns.boxplot(x = 'Pclass', y = 'Age', data = test)


def impute_age_test(cols):
    Age = cols[0]
    Pclass = cols[1]
    
    if pd.isnull(Age):
        
        if Pclass == 1:
            return 42 
        elif Pclass == 2:
            return 26
        else: 
            return 23
        
    else:
        return Age
    
    
test['Age'] = test[['Age', 'Pclass']].apply(impute_age_test,axis = 1 )
sns.heatmap(test.isnull(), yticklabels = False, cbar = False, cmap = 'viridis')
test.drop('Cabin', axis = 1, inplace = True)
sns.heatmap(test.isnull(), yticklabels = False, cbar = False, cmap = 'viridis')
test[test['Fare'].isnull() == True]
test[(test['Pclass'] == 3) & (test['SibSp'] == 0 ) & (test['Embarked'] == 'S' )]['Age'].mean()
test
test.fillna(value = 24.7, inplace = True)
test[test['Fare'].isnull() == True]
sns.heatmap(test.isnull(), yticklabels = False, cbar = False, cmap = 'viridis')
test.head()
sex = pd.get_dummies(test['Sex'],drop_first = True)
embark = pd.get_dummies(test['Embarked'],drop_first = True )
test = pd.concat([test, sex, embark], axis = 1)
test.drop(['Sex', 'Embarked', 'Name', 'Ticket'], axis = 1, inplace = True)
test.drop('PassengerId', axis = 1, inplace = True)
test.head()
logmodel.predict(test)
train1 = train[:]
train1
pclass = pd.get_dummies(train['Pclass'],drop_first = True )
train1 = pd.concat([train1, pclass], axis = 1)
train1.head()
train1.drop('Pclass', axis = 1, inplace = True)
train1.head()
X1 = train1.drop('Survived', axis = 1)
y1 = train['Survived']
X1_train, X1_test, y1_train, y1_test = train_test_split(X1, y1, test_size=0.3, random_state=101)
logmodel1 = LogisticRegression(solver = 'liblinear')
logmodel1.fit(X1_train, y1_train)
predictions1 = logmodel1.predict(X1_test)
print(classification_report(y1_test, predictions1))
print(classification_report(y_test, predictions))
confusion_matrix(y1_test, predictions1)
confusion_matrix(y_test, predictions)
